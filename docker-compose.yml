services:
  product:
    build: microservices/product-service
    image: hands-on/product-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config/repo/application.yml,file:/config/repo/product.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PWD}
    volumes:
      - ./config:/config
    depends_on:
      mongodb.persistence:
        condition: service_healthy
      rabbitmq.message-queue:
        condition: service_healthy

  recommendation:
    build: microservices/recommendation-service
    image: hands-on/recommendation-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config/repo/application.yml,file:/config/repo/recommendation.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PWD}
    volumes:
      - ./config:/config
    depends_on:
      mongodb.persistence:
        condition: service_healthy
      rabbitmq.message-queue:
        condition: service_healthy

  review:
    build: microservices/review-service
    image: hands-on/review-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config/repo/application.yml,file:/config/repo/review.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PWD}
    volumes:
      - ./config:/config
    depends_on:
      postgres.persistence:
        condition: service_healthy
      rabbitmq.message-queue:
        condition: service_healthy

  estate-service:
    build: oltp/estate-service
    image: oltp/estate-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config/repo/application.yml,file:/config/repo/estate.yml
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PWD}
    volumes:
      - ./config:/config
    depends_on:
      postgres.persistence:
        condition: service_healthy
      rabbitmq.message-queue:
        condition: service_healthy

  product-composite:
    build: microservices/product-composite-service
    image: hands-on/product-composite-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config/repo/application.yml,file:/config/repo/product-composite.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
    volumes:
      - ./config:/config
    depends_on:
      rabbitmq.message-queue:
        condition: service_healthy
      auth-server:
        condition: service_healthy

  mongodb.persistence:
    image: mongo:7.0.11
    restart: always
    mem_limit: 512m
    ports:
      - "27017:27017"
    command: mongod
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USR}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PWD}
    healthcheck:
      test: "mongostat -n 1 -u ${MONGODB_USR} -p ${MONGODB_PWD} --authenticationDatabase=admin"
      interval: 5s
      timeout: 2s
      retries: 60

  mysql.persistence:
    image: mysql:8.0.37
    restart: always
    mem_limit: 512m
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PWD}
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=${MYSQL_USR}
      - MYSQL_PASSWORD=${MYSQL_PWD}
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USR} --password=${MYSQL_PWD} --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 2s
      retries: 60

  postgres.persistence:
    image: postgres:latest
    restart: always
    mem_limit: 512m
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=review-db
      - POSTGRES_USER=${POSTGRES_USR}
      - POSTGRES_PASSWORD=${POSTGRES_PWD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USR}"]
      interval: 5s
      timeout: 2s
      retries: 60

  rabbitmq.message-queue:
    image: rabbitmq:3.13.3-management
    restart: always
    mem_limit: 512m
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USR}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PWD}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 2s
      retries: 60

  gateway:
    build: spring-cloud/gateway
    image: hands-on/gateway
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config/repo/application.yml,file:/config/repo/gateway.yml
      - SERVER_SSL_KEY_STORE_PASSWORD=${GATEWAY_TLS_PWD}
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
    volumes:
      - ./config:/config
    ports:
      - "8443:8443"
    depends_on:
      auth-server:
        condition: service_healthy

  auth-server:
    build: spring-cloud/authorization-server
    image: hands-on/auth-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config/repo/application.yml,file:/config/repo/auth-server.yml
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USR}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PWD}
    volumes:
      - ./config:/config
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://localhost:4004/actuator/health"]
      interval: 5s
      timeout: 2s
      retries: 60

  jaeger-collector.istio-system:
    image: openzipkin/zipkin
    restart: always
    mem_limit: 1024m
    environment:
      - STORAGE_TYPE=mem
    ports:
      - 9411:9411

  redis-node-0:
    image: docker.io/bitnami/redis-cluster:7.2
    volumes:
      - redis-cluster_data-0:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis-password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-cluster.redis'

  redis-node-1:
    image: docker.io/bitnami/redis-cluster:7.2
    volumes:
      - redis-cluster_data-1:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis-password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-cluster.redis'

  redis-node-2:
    image: docker.io/bitnami/redis-cluster:7.2
    volumes:
      - redis-cluster_data-2:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis-password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-cluster.redis'

  redis-node-3:
    image: docker.io/bitnami/redis-cluster:7.2
    volumes:
      - redis-cluster_data-3:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis-password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-cluster.redis'

  redis-node-4:
    image: docker.io/bitnami/redis-cluster:7.2
    volumes:
      - redis-cluster_data-4:/bitnami/redis/data
    environment:
      - 'REDIS_PASSWORD=redis-password'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-cluster.redis'

  redis-cluster.redis:
    image: docker.io/bitnami/redis-cluster:7.2
    volumes:
      - redis-cluster_data-5:/bitnami/redis/data
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
    environment:
      - 'REDIS_PASSWORD=redis-password'
      - 'REDISCLI_AUTH=redis-password'
      - 'REDIS_CLUSTER_REPLICAS=1'
      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-cluster.redis'
      - 'REDIS_CLUSTER_CREATOR=yes'

volumes:
  redis-cluster_data-0:
    driver: local
  redis-cluster_data-1:
    driver: local
  redis-cluster_data-2:
    driver: local
  redis-cluster_data-3:
    driver: local
  redis-cluster_data-4:
    driver: local
  redis-cluster_data-5:
    driver: local

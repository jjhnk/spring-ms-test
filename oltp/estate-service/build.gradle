plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'hy.oltp.core'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	annotationApiVersion = '3.0.0'
	hibernateValidatorVersion = '8.0.0.Final'
	jakartaVersion = '3.1.0'
	mapstructVersion = '1.5.5.Final'
	querydslVersion = '5.0.0'
	springCloudVersion = '2023.0.2'
	springdocVersion = '2.2.0'
}

repositories {
	mavenCentral()
	mavenLocal()
}

jar {
	enabled = false
}

dependencies {
	implementation 'hy.microservices.api:api:1.0.0'
	implementation 'hy.microservices.util:util:1.0.0'

	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	implementation 'net.ttddyy.observation:datasource-micrometer-spring-boot:1.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	implementation 'org.springframework.security:spring-security-oauth2-resource-server'
	implementation "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
	implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
	implementation "org.springdoc:springdoc-openapi-starter-common:${springdocVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
	implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"

	compileOnly 'org.projectlombok:lombok'
	compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api:${jakartaVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.projectlombok:lombok'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	testAnnotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
	imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('generateQueryDSL', JavaCompile) {
	source = sourceSets.main.java
	classpath = sourceSets.main.compileClasspath
	options.annotationProcessorPath = configurations.annotationProcessor
	destinationDirectory.set(file("build/generated/source/apt/main"))
	options.compilerArgs = [
		"-proc:only",
		"-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
}
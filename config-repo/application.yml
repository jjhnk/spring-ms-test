spring:
  rabbitmq:
    host: 127.0.0.1
    port: 5672
  cloud:
    stream:
      default-binder: rabbit
      kafka.binder:
        brokers: 127.0.0.1
        defaultBrokerPort: 9092
  lifecycle:
    timeout-per-shutdown-phase: 10s

server:
  shutdown: graceful

app:
  auth:
    server: localhost

management:
  endpoints:
    web.exposure.include: "*"
  endpoint:
    health:
      validate-group-membership: false
      group:
        readiness:
          include:
          - readinessState
          - rabbit
          - db
          - mongo
          show-details: always
        liveness:
          show-details: always
      show-details: always
      probes:
        enabled: true
  health:
    rabbit.enabled: true
    kafka.enabled: false
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
    jms:
      enabled: false
  zipkin:
    tracing:
      endpoint: http://zipkin-server:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0


logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

---

spring:
  config:
    activate.on-profile: docker
  cloud:
    stream:
      kafka.binder.brokers: kafka
  rabbitmq:
    host: rabbitmq

app:
  auth:
    server: auth-server

---

spring:
  config:
    activate.on-profile: kafka
  cloud:
    stream.defaultBinder: kafka
    stream.kafka.binder.replication-factor: 1
  kafka:
    bootstrap-servers: kafka:9092

management:
  health:
    rabbit.enabled: false
    kafka.enabled: true

---

spring:
  config:
    activate.on-profile: prod
  rabbitmq:
    host: 172.17.0.1

management:
  endpoints:
    web.exposure.include: health,info,circuitbreakerevents
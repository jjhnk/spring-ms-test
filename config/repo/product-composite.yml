spring:
  application:
    name: product-composite
  cloud:
    stream:
      default.contentType: application/json
      bindings:
        products-out-0:
          destination: products
          producer:
            required-groups: auditGroup
        recommendations-out-0:
          destination: recommendations
          producer:
            required-groups: auditGroup
        reviews-out-0:
          destination: reviews
          producer:
            required-groups: auditGroup
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${jwt.issuer.uri:http://auth-server}
  # codec:
    # log-request-details: true

server:
  port: 7000
  forward-headers-strategy: framework
  error:
    include-message: always

logging:
  level:
    root: INFO
    hy: INFO
    '[org.springframework.web.server.adapter.HttpWebHandlerAdapter]': INFO
    # '[org.springframework.data.mongodb.core.ReactiveMongoTemplate]': INFO
    # org.springframework.web.reactive.function.client.ExchangeFunctions: TRACE


springdoc:
  packagesToScan: hy.microservices.composite.product
  pathsToMatch: /**
  swagger-ui:
    path: /${spring.application.name}/openapi/swagger-ui.html
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
    oauth:
      clientId: writer
      clientSecret: secret-writer
      useBasicAuthenticationWithAccessCodeGrant: true
    urls:
    - url: https://minikube.me/product-composite/openapi/v3/api-docs
      name: Product Composite
    - url: https://minikube.me/estate/openapi/v3/api-docs
      name: Estate
  webjars:
    # To change the webjars prefix that is visible the URL of swagger-ui for **spring-webflux**.
    # see https://springdoc.org/properties.html
    prefix: /webjars
  oAuthFlow:
    authorizationUrl: https://keycloak.minikube.me/oauth2/authorize
    tokenUrl: https://keycloak.minikube.me/oauth2/token
  api-docs:
    path: /${spring.application.name}/openapi/v3/api-docs
  cache:
    disabled: true

api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL
    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  product-composite:
    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Base product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)

        ## Product id 113
        200 - Ok, but no recommendations will be returned

        ## Product id 213
        200 - Ok, but no reviews will be returned

        ## Non numerical product id
        400 - A **Bad Request** error will be returned

        ## Product id 13
        404 - A **Not Found** error will be returned

        ## Negative product ids
        422 - An **Unprocessable Entity** error will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.

        This means that a delete request of a non-existing product will return **200 Ok**.

resilience4j:
  circuitbreaker:
    instances:
      product:
        allow-health-indicator-to-fail: false
        register-health-indicator: true
        sliding-window-type: count-based
        sliding-window-size: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10000
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        ignore-exceptions:
        - hy.api.exceptions.InvalidInputException
        - hy.api.exceptions.NotFoundException
  timelimiter:
    instances:
      product:
        timeout-duration: 2s
  retry:
    instances:
      product:
        max-attempts: 3
        wait-duration: 1000
        retry-exceptions:
        - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

management:
  health:
    circuitbreakers:
      enabled: true

---

spring:
  config:
    activate:
      on-profile:
      - docker

server:
  port: 80

springdoc:
  oAuthFlow:
    authorizationUrl: https://minikube.me/oauth2/authorize
    tokenUrl: https://minikube.me/oauth2/token

---

spring:
  config:
    activate:
      on-profile:
      - streaming_partitioned
  cloud:
    stream:
      bindings.products-out-0.producer:
        partition-key-expression: headers['partitionKey']
        partition-count: 2
      bindings.recommendations-out-0.producer:
        partition-key-expression: headers['partitionKey']
        partition-count: 2
      bindings.reviews-out-0.producer:
        partition-key-expression: headers['partitionKey']
        partition-count: 2

---

spring:
  config:
    activate:
      on-profile:
      - prod

logging:
  level:
    root: WARN
    hy: WARN
    '[org.springframework.web.server.adapter.HttpWebHandlerAdapter]': WARN